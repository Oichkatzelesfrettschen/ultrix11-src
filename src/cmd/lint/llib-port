/*
 * SCCSID: @(#)llib-port	3.0	4/21/86
 */

/**********************************************************************
 *   Copyright (c) Digital Equipment Corporation 1984, 1985, 1986.    *
 *   All Rights Reserved. 					      *
 *   Reference "/usr/src/COPYRIGHT" for applicable restrictions.      *
 **********************************************************************/

/*LINTLIBRARY*/
#include <stdio.h>

/* EXIT(2) */
void	exit(s) { ; }
void	_exit(s) { ; }

/* SIGNAL(2) */
int (*	signal(s, a))() int (*a)(); { return (a); }

/* TIME(2) */
long	time(t) long *t; { return (0L); }

/* UNLINK(2) */
int	unlink(s) char *s; { return (0); }

/* ABORT(3) */
	/*VARARGS0*/
int	abort() { return (0); }

/* ABS(3) */
int	abs(i) { return (i); }

/* ASSERT(3X) */
void	_assert(a, f, n) char *a, *f; { ; }

/* CONV(3) */
#undef _toupper
#undef _tolower
#undef toascii
int	toupper(i) { return (i); }
int	tolower(i) { return (i); }
int	_toupper(i) { return (i); }
int	_tolower(i) { return (i); }
int	toascii(i) { return (i); }

/* CLOCK(3) */
long	clock() { return (0L); }

/* CTIME(3) */
char *	ctime(t) long *t; { return (""); }
#include <time.h>
struct tm *	localtime(c) long *c; { static struct tm x; return (&x); }
struct tm *	gmtime(c) long *c; { static struct tm x; return (&x); }
char *	asctime(t) struct tm *t; { return (""); }
void	tzset() { ; }
long	timezone;
int	daylight;
char *	tzname[2];

/* CTYPE(3) */
#undef isalpha
#undef isupper
#undef islower
#undef isdigit
#undef isxdigit
#undef isalnum
#undef isspace
#undef ispunct
#undef isprint
#undef isgraph
#undef iscntrl
#undef isascii
int	isalpha(c) { return (c); }
int	isupper(c) { return (c); }
int	islower(c) { return (c); }
int	isdigit(c) { return (c); }
int	isxdigit(c) { return (c); }
int	isalnum(c) { return (c); }
int	isspace(c) { return (c); }
int	ispunct(c) { return (c); }
int	isprint(c) { return (c); }
int	isgraph(c) { return (c); }
int	iscntrl(c) { return (c); }
int	isascii(c) { return (c); }
char	_ctype[129];

/* DRAND48(3) */
double	drand48() { return (0.0); }
double	erand48(x) unsigned short x[3]; { return (0.0); }
long	lrand48() { return (0L); }
long	nrand48(x) unsigned short x[3]; { return (0L); }
long	mrand48() { return (0L); }
long	jrand48(x) unsigned short x[3]; { return (0L); }
void	srand48(s) long s; { ; }
unsigned short *	seed48(s) unsigned short s[3]; { ; }
void	lcong48(p) unsigned short p[7]; { ; }

/* FCLOSE(3S) */
int	fclose(f) FILE *f; { return (0); }
int	fflush(f) FILE *f; { return (0); }

/* FERROR(3S) */
#undef feof
#undef ferror
#undef clearerr
#undef fileno
int	feof(f) FILE *f; { return (0); }
int	ferror(f) FILE *f; { return (0); }
void	clearerr(f) FILE *f; { ; }
int	fileno(f) FILE *f; { return (0); }

/* FOPEN(3S) */
FILE *	fopen(f, t) char *f, *t; { return (stdin); }
FILE *	freopen(f, t, s) char *f, *t; FILE *s; { return (s); }

/* FREAD(3S) */
int	fread(b, s, n, f) char *b; FILE *f; { return (n); }
int	fwrite(b, s, n, f) char *b; FILE *f; { return (n); }

/* FREXP(3) */
double	frexp(x, e) double x; int *e; { return (x); }
double	ldexp(v, e) double v; { return (v); }
double	modf(v, i) double v, *i; { return (v); }

/* FSEEK(3S) */
int	fseek(f, o, p) FILE *f; long o; { return (p); }
long	ftell(f) FILE *f; { return (0L); }
void	rewind(f) FILE *f; { ; }

/* GETC(3S) */
#undef getc
#undef getchar
int	getc(f) FILE *f; { return (0); }
int	getchar() { return (0); }
int	fgetc(f) FILE *f; { return (0); }
int	getw(f) FILE *f; { return (0); }

/* GETS(3S) */
char *	gets(s) char *s; { return (s); }
char *	fgets(s, n, f) char *s; FILE *f; { return (s); }

/* MALLOC(3) */
char *	malloc(s) unsigned s; { return (""); }
void	free(s) char *s; { ; }
char *	realloc(s, n) char *s; unsigned n; { return (s); }
char *	calloc(n, e) unsigned n, e; { return (""); }

/* POPEN(3S) */
FILE *	popen(c, t) char *c, *t; { return (stdin); }
int	pclose(f) FILE *f; { return (0); }

/* PRINTF(3S) */
	/*VARARGS1*/
int	printf(s) char *s; { ; }
	/*VARARGS2*/
int	fprintf(f, s) FILE *f; char *s; { ; }
	/*VARARGS2*/
int	sprintf(p, s) char *p, *s; { ; }

/* PUTC(3S) */
#undef putc
#undef putchar
int	putc(c, f) FILE *f; { return (c); }
int	putchar(c) { return (c); }
int	fputc(c, f) FILE *f; { return (c); }
int	putw(w, f) FILE *f; { return (w); }

/* PUTS(3S) */
int	puts(s) char *s; { return (0); }
int	fputs(s, f) char *s; FILE *f; { ; }

/* QSORT(3) */
void	qsort(b, n, w, c) char *b; unsigned n, w; int (*c)(); { ; }

/* RAND(3) */
void	srand(s) unsigned s; { ; }
int	rand() { return (0); }

/* SCANF(3S) */
	/*VARARGS1*/
int	scanf(s) char *s; { return (0); }
	/*VARARGS2*/
int	fscanf(f, s) FILE *f; char *s; { return (0); }
	/*VARARGS2*/
int	sscanf(p, s) char *p, *s; { return (0); }

/* SETBUF(3S) */
void	setbuf(f, b) FILE *f; char *b; { ; }

/* SETJMP(3) */
#include <setjmp.h>
int	setjmp(e) jmp_buf e; { return (0); }
void	longjmp(e, v) jmp_buf e; { ; }

/* SLEEP(3) */
unsigned	sleep(n) unsigned n; { return (n); }

/* SSIGNAL(3) */
int (*	ssignal(s, a))() int (*a)(); { return (a); }
int	gsignal(s) { return (s); }

/* STDIO(3S) */
FILE	_iob[_NFILE];
unsigned char *	_bufendtab[_NFILE];

/* STRING(3) */
char *	strcat(a, b) char *a, *b; { ; }
char *	strncat(a, b, n) char *a, *b; { ; }
int	strcmp(a, b) char *a, *b; { return (0); }
int	strncmp(a, b, n) char *a, *b; { return (n); }
char *	strcpy(a, b) char *a, *b; { ; }
char *	strncpy(a, b, n) char *a, *b; { ; }
int	strlen(s) char *s; { return (0); }
char *	strchr(a, b) char *a, b; { return (a); }
char *	strrchr(a, b) char *a, b; { return (a); }
char *	strpbrk(a, b) char *a, *b; { return (a); }
int	strspn(a, b) char *a, *b; { return (0); }
int	strcspn(a, b) char *a, *b; { return (0); }
char *	strtok(a, b) char *a, *b; { return (a); }

/* STRTOD(3) */
double	strtod(s, t) char *s, **t; { return (0.0); }
double	atof(s) char *s; { return (0.0); }

/* STRTOL(3) */
long	strtol(s, t, b) char *s, **t; { return (0L); }
long	atol(s) char *s; { return (0L); }
int	atoi(s) char *s; { return (0); }

/* SYSTEM(3S) */
int	system(s) char *s; { return (0); }

/* TMPNAM(3S) */
char *	tmpnam(s) char *s; { return (s); }

/* TTYNAME(3) */
char *	ttyname(f) { return (""); }
int	isatty(f) { return (f); }

/* UNGETC(3S) */
int	ungetc(c, f) FILE *f; { return (c); }

/* UNDOCUMENTED -- declared in <stdio.h>, not really in the port lib */
FILE *	fdopen(f, t) char *t; { return (stdin); }
char *	tempnam(d, s) char *d, *s; { return (d); }
FILE *	tmpfile() { return (stdin); }
